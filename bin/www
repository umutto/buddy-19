#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("buddy19:server");
var http = require("http");

console.log("========================");
console.log("Node version: ", process.version);
console.log("Buddy-19 version:", process.env.npm_package_version);
console.log("========================");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Socket io initialization and bindings
 */

var socketController = require("../configs/socket.io");
var io = socketController.init(server);

app.use(function (req, res, next) {
  req.io = io;
  next();
});

/**
 * Database initialization and bindings
 */

var dbController = require("../configs/sqlite3");
var nodeCleanup = require("node-cleanup");

var db = dbController.init("./configs/db/buddy19.db");

app.use(function (req, res, next) {
  req.db = db;
  next();
});

nodeCleanup(function (exitCode, signal) {
  dbController.close();
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
